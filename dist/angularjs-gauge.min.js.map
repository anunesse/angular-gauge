{"version":3,"sources":["angularjs-gauge.min.js"],"names":["angular","gaugeMeterProviderFn","defaultOptions","size","value","undefined","min","max","cap","thick","type","foregroundColor","backgroundColor","labelOnly","duration","this","setOptions","customOptions","isObject","Error","merge","ngGauge","getOptions","extend","$get","gaugeMeterDirective","Gauge","element","options","find","text","legend","unit","context","getContext","init","prototype","setupStyles","create","canvas","width","height","lineCap","lineWidth","lfs","llh","css","display","fontWeight","position","textAlign","overflow","textOverflow","fontSize","lineHeight","textDecoration","opacity","fs","lh","parseInt","animate","timestamp","Date","getTime","runtime","starttime","progress","Math","self","drawShell","head","displacement","tail","color","requestID","window","requestAnimationFrame","cancelAnimationFrame","getType","bounds","getBounds","getDuration","getMin","getMax","clamp","getValue","getForegroundColorByRange","PI","start","middle","center","getCenter","radius","getRadius","getBackgroundColor","clear","beginPath","strokeStyle","arc","x","y","stroke","clearRect","getWidth","getHeight","update","destroy","getThickness","getForegroundColor","isNumber","isNaN","parseFloat","Number","match","Object","keys","thresholds","filter","item","sort","reverse","getLineCap","restrict","replace","template","scope","append","label","prepend","link","watchData","nv","ov","gauge","isDefined","equals","watchOther","defaults","$watch","$on","module","directive","provider","$inject"],"mappings":"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","file":"angularjs-gauge.min.js","sourcesContent":["(function (angular) {\n    'use strict';\n    angular\n        .module('angularjs-gauge', [])\n        .directive('ngGauge', gaugeMeterDirective)\n        .provider('ngGauge', gaugeMeterProviderFn);\n\n    gaugeMeterProviderFn.$inject = [];\n    function gaugeMeterProviderFn() {\n        var defaultOptions = {\n            size: 200,\n            value: undefined,\n            min: 0,\n            max: 100,\n            cap: 'butt',\n            thick: 6,\n            type: 'full',\n            foregroundColor: 'rgba(0, 150, 136, 1)',\n            backgroundColor: 'rgba(0, 0, 0, 0.1)',\n            labelOnly: false,\n            duration: 1500\n        };\n\n        this.setOptions = function (customOptions) {\n            if (!(customOptions && angular.isObject(customOptions)))\n                throw new Error('Invalid option type specified in the ngGaugeProvider');\n            defaultOptions = angular.merge(defaultOptions, customOptions);\n        };\n\n        var ngGauge = {\n            getOptions: function () {\n                return angular.extend({}, defaultOptions);\n            }\n        };\n\n        this.$get = function () {\n            return ngGauge;\n        };\n\n    }\n\n    gaugeMeterDirective.$inject = ['ngGauge'];\n\n    function gaugeMeterDirective(ngGauge) {\n\n        var tpl = '<div style=\"display:inline-block;text-align:center;position:relative;\"><span ng-show=\"{{!labelOnly}}\"><u>{{prepend}}</u>{{value | number}}<u>{{append}}</u></span><b>{{label}}</b><canvas></canvas></div>';\n\n        var Gauge = function (element, options) {\n            this.element = element.find('canvas')[0];\n            this.text = element.find('span');\n            this.legend = element.find('b');\n            this.unit = element.find('u');\n            this.context = this.element.getContext('2d');\n            this.options = options;\n            this.init();\n        };\n\n        Gauge.prototype = {\n\n            init: function () {\n                this.setupStyles();\n                this.create();\n            },\n\n            setupStyles: function () {\n\n                this.context.canvas.width = this.options.size;\n                this.context.canvas.height = this.options.size;\n                this.context.lineCap = this.options.cap;\n                this.context.lineWidth = this.options.thick;\n\n                var lfs = this.options.size * 0.22,\n                    llh = this.options.size;\n\n                this.text.css({\n                    display: 'inline-block',\n                    fontWeight: 'normal',\n                    width: '100%',\n                    position: 'absolute',\n                    textAlign: 'center',\n                    overflow: 'hidden',\n                    textOverflow: 'ellipsis',\n                    fontSize: lfs + 'px',\n                    lineHeight: llh + 'px'\n                });\n\n                this.unit.css({\n                    textDecoration: 'none',\n                    fontSize: '0.6em',\n                    fontWeight: 200,\n                    opacity: 0.8\n                });\n\n                var fs = this.options.labelOnly ? lfs * 0.8 : this.options.size / 13;\n                var lh = this.options.labelOnly ? llh : (5 * fs) + parseInt(this.options.size);\n\n                this.legend.css({\n                    display: 'inline-block',\n                    width: '100%',\n                    position: 'absolute',\n                    textAlign: 'center',\n                    overflow: 'hidden',\n                    textOverflow: 'ellipsis',\n                    fontWeight: 'normal',\n                    fontSize: fs + 'px',\n                    lineHeight: lh + 'px'\n                });\n            },\n            create: function () {\n\n                var self = this,\n                    type = this.getType(),\n                    bounds = this.getBounds(type),\n                    duration = this.getDuration(),\n                    min = this.getMin(),\n                    max = this.getMax(),\n                    value = this.clamp(this.getValue(), min, max),\n                    head = bounds.head,\n                    unit = (bounds.tail - bounds.head) / (max - min),\n                    displacement = unit * (value - min),\n                    tail = bounds.tail,\n                    color = this.getForegroundColorByRange(value),\n                    requestID,\n                    starttime;\n\n                function animate(timestamp) {\n                    timestamp = timestamp || new Date().getTime();\n                    var runtime = timestamp - starttime;\n                    var progress = runtime / duration;\n                    progress = Math.min(progress, 1);\n                    self.drawShell(head, head + displacement * progress, tail, color);\n                    if (runtime < duration) {\n                        requestID = window.requestAnimationFrame(function (timestamp) {\n                            animate(timestamp);\n                        });\n                    } else {\n                        cancelAnimationFrame(requestID);\n                    }\n                }\n\n                requestAnimationFrame(function (timestamp) {\n                    starttime = timestamp || new Date().getTime();\n                    animate(timestamp);\n                });\n\n            },\n\n            getBounds: function (type) {\n                var head, tail;\n                if (type == 'semi') {\n                    head = Math.PI;\n                    tail = 2 * Math.PI;\n                } else if (type == 'full') {\n                    head = 1.5 * Math.PI;\n                    tail = 3.5 * Math.PI;\n                } else if (type === 'arch') {\n                    head = 0.8 * Math.PI;\n                    tail = 2.2 * Math.PI;\n                }\n\n                return {\n                    head: head,\n                    tail: tail\n                };\n\n            },\n\n            drawShell: function (start, middle, tail, color) {\n                var\n                    context = this.context,\n                    center = this.getCenter(),\n                    radius = this.getRadius(),\n                    foregroundColor = color,\n                    backgroundColor = this.getBackgroundColor();\n                this.clear();\n\n                context.beginPath();\n                context.strokeStyle = backgroundColor;\n                context.arc(center.x, center.y, radius, middle, tail, false);\n                context.stroke();\n\n                context.beginPath();\n                context.strokeStyle = foregroundColor;\n                context.arc(center.x, center.y, radius, start, middle, false);\n                context.stroke();\n\n            },\n\n            clear: function () {\n                this.context.clearRect(0, 0, this.getWidth(), this.getHeight());\n            },\n\n            update: function () {\n                this.create();\n            },\n\n            destroy: function () {\n                this.clear();\n            },\n\n            getRadius: function () {\n                var center = this.getCenter();\n                return center.x - this.getThickness();\n            },\n\n            getCenter: function () {\n                var x = this.getWidth() / 2,\n                    y = this.getHeight() / 2;\n                return {\n                    x: x,\n                    y: y\n                };\n            },\n\n            getValue: function () {\n                return this.options.value;\n            },\n            getMin: function () {\n                return this.options.min;\n            },\n            getMax: function () {\n                return this.options.max;\n            },\n            getWidth: function () {\n                return this.context.canvas.width;\n            },\n\n            getHeight: function () {\n                return this.context.canvas.height;\n            },\n\n            getThickness: function () {\n                return this.options.thick;\n            },\n\n            getBackgroundColor: function () {\n                return this.options.backgroundColor;\n            },\n\n            getForegroundColor: function () {\n                return this.options.foregroundColor;\n            },\n\n            getForegroundColorByRange: function (value) {\n\n                var isNumber = function (value) {\n                    return value != undefined && !isNaN(parseFloat(value)) && !isNaN(Number(value));\n                };\n\n                var match = Object.keys(this.options.thresholds)\n                    .filter(function (item) { return isNumber(item) && Number(item) <= value })\n                    .sort().reverse()[0];\n\n                return match !== undefined ? this.options.thresholds[match].color || this.getForegroundColor() : this.getForegroundColor();\n            },\n\n            getLineCap: function () {\n                return this.options.cap;\n            },\n\n            getType: function () {\n                return this.options.type;\n            },\n\n            getDuration: function () {\n                return this.options.duration;\n            },\n\n            clamp: function (value, min, max) {\n                return Math.max(min, Math.min(max, value));\n            }\n\n        };\n\n\n        return {\n            restrict: 'E',\n            replace: true,\n            template: tpl,\n            scope: {\n                append: '@?',\n                backgroundColor: '@?',\n                cap: '@?',\n                foregroundColor: '@?',\n                label: '@?',\n                labelOnly: '@?',\n                prepend: '@?',\n                size: '@?',\n                thick: '@?',\n                type: '@?',\n                duration: '@?',\n                value: '=?',\n                min: '=?',\n                max: '=?',\n                thresholds: '=?'\n\n            },\n            link: function (scope, element) {\n                var defaults = ngGauge.getOptions(); // fetching default settings from provider\n                scope.min = angular.isDefined(scope.min) ? scope.min : defaults.min;\n                scope.max = angular.isDefined(scope.max) ? scope.max : defaults.max;\n                scope.value = angular.isDefined(scope.value) ? scope.value : defaults.value;\n                scope.size = angular.isDefined(scope.size) ? scope.size : defaults.size;\n                scope.cap = angular.isDefined(scope.cap) ? scope.cap : defaults.cap;\n                scope.thick = angular.isDefined(scope.thick) ? scope.thick : defaults.thick;\n                scope.type = angular.isDefined(scope.type) ? scope.type : defaults.type;\n                scope.duration = angular.isDefined(scope.duration) ? scope.duration : defaults.duration;\n                scope.labelOnly = angular.isDefined(scope.labelOnly) ? scope.labelOnly : defaults.labelOnly;\n                scope.foregroundColor = angular.isDefined(scope.foregroundColor) ? scope.foregroundColor : defaults.foregroundColor;\n                scope.backgroundColor = angular.isDefined(scope.backgroundColor) ? scope.backgroundColor : defaults.backgroundColor;\n                scope.thresholds = angular.isDefined(scope.thresholds) ? scope.thresholds : {};\n\n                var gauge = new Gauge(element, scope);\n\n                scope.$watch('value', watchData, false);\n                scope.$watch('min', watchData, false);\n                scope.$watch('max', watchData, false);\n                scope.$watch('cap', watchOther, false);\n                scope.$watch('thick', watchOther, false);\n                scope.$watch('type', watchOther, false);\n                scope.$watch('size', watchOther, false);\n                scope.$watch('duration', watchOther, false);\n                scope.$watch('foregroundColor', watchOther, false);\n                scope.$watch('backgroundColor', watchOther, false);\n                scope.$watch('thresholds', watchData, false);\n\n                scope.$on('$destroy', function () { });\n                scope.$on('$resize', function () { });\n\n                function watchData(nv, ov) {\n                    if (!gauge) return;\n                    if (!angular.isDefined(nv) || angular.equals(nv, ov)) return;\n                    gauge.update();\n                }\n\n                function watchOther(nv, ov) {\n                    if (!angular.isDefined(nv) || angular.equals(nv, ov)) return;\n                    gauge.destroy();\n                    gauge.init();\n                }\n            }\n        };\n\n    }\n}(angular));\n"]}